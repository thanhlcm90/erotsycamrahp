@model PharmacyStore.Models.LoginModel

@{
	ViewBag.Title = "Đăng nhập";
	Layout = null;
}

<!DOCTYPE html>

<!--[if IEMobile 7]><html class="no-js iem7 oldie"><![endif]-->
<!--[if (IE 7)&!(IEMobile)]><html class="no-js ie7 oldie" lang="en"><![endif]-->
<!--[if (IE 8)&!(IEMobile)]><html class="no-js ie8 oldie" lang="en"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)]><!-->
<html class="no-js" lang="en">
<!--<![endif]-->
<html>
<head>
	<title>@ViewBag.Title</title>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">

	<meta name="description" content="">
	<meta name="author" content="">

	<!-- http://davidbcalhoun.com/2010/viewport-metatag -->
	<meta name="HandheldFriendly" content="True">
	<meta name="MobileOptimized" content="320">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

	<!-- For all browsers -->
	@Styles.Render("~/Content/developr/loginstyle")
	@Bundles.RenderFormat("~/Content/developr/print", BundlesFormats.PRINT)
	<!-- For progressively larger displays -->
	@Bundles.RenderFormat("~/Content/developr/480", BundlesFormats.RES480)
	@Bundles.RenderFormat("~/Content/developr/768", BundlesFormats.RES768)
	@Bundles.RenderFormat("~/Content/developr/1200", BundlesFormats.RES1200)
	<!-- For Retina displays -->
	@Bundles.RenderFormat("~/Content/developr/resolutionRetina", BundlesFormats.RETINA)

	<!-- Login pages styles -->
	@Bundles.RenderFormat("~/Content/developr/loginstylemedia", BundlesFormats.SCREEN)

	<!-- Webfonts -->
	<link href='http://fonts.googleapis.com/css?family=Open+Sans:300' rel='stylesheet' type='text/css'>

	<!-- JavaScript at bottom except for Modernizr -->
	@Scripts.Render("~/developr/modernizr")

	<!-- For Modern Browsers -->
	<link rel="shortcut icon" src="@Url.Content("~/Images/favicons/favicon.png")">
	<!-- For everything else -->
	<link rel="shortcut icon" src="@Url.Content("~/Images/favicons/favicon.ico")">
	<!-- For retina screens -->
	<link rel="apple-touch-icon-precomposed" sizes="114x114" src="@Url.Content("~/Images/favicons/apple-touch-icon-retina.png")">
	<!-- For iPad 1-->
	<link rel="apple-touch-icon-precomposed" sizes="72x72" src="@Url.Content("~/Images/favicons/apple-touch-icon-ipad.png")">
	<!-- For iPhone 3G, iPod Touch and Android -->
	<link rel="apple-touch-icon-precomposed" src="@Url.Content("~/Images/favicons/apple-touch-icon.png")">

	<!-- iOS web-app metas -->
	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-status-bar-style" content="black">

	<!-- Startup image for web apps -->
	<link rel="apple-touch-startup-image" src="@Url.Content("~/Images/splash/ipad-landscape.png")" media="screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:landscape)">
	<link rel="apple-touch-startup-image" src="@Url.Content("~/Images/splash/ipad-portrait.png")" media="screen and (min-device-width: 481px) and (max-device-width: 1024px) and (orientation:portrait)">
	<link rel="apple-touch-startup-image" src="@Url.Content("~/Images/splash/iphone.png")" media="screen and (max-device-width: 320px)">

	<!-- Microsoft clear type rendering -->
	<meta http-equiv="cleartype" content="on">

	<!-- IE9 Pinned Sites: http://msdn.microsoft.com/en-us/library/gg131029.aspx -->
	<meta name="application-name" content="Developr Admin Skin">
	<meta name="msapplication-tooltip" content="Cross-platform admin template.">
	<meta name="msapplication-starturl" content="http://www.display-inline.fr/demo/developr">
	<!-- These custom tasks are examples, you need to edit them to show actual pages -->
	<meta name="msapplication-task" content="name=Agenda;action-uri=http://www.display-inline.fr/demo/developr/agenda.html;icon-uri=http://www.display-inline.fr/demo/developr/img/favicons/favicon.ico">
	<meta name="msapplication-task" content="name=My profile;action-uri=http://www.display-inline.fr/demo/developr/profile.html;icon-uri=http://www.display-inline.fr/demo/developr/img/favicons/favicon.ico">

	<!-- jQuery -->
	@Scripts.Render("~/bundles/jquery")
	@Scripts.Render("~/bundles/jquery-ba-hashchange")

</head>
<body class="linen">

	<div id="container">

		<hgroup id="login-title" class="large-margin-bottom">
			<h1 class="login-title-image">Pharmacy Store</h1>
			<h5>&copy; Lê Cao Minh Thành</h5>
		</hgroup>

		<div id="form-wrapper">
			<div id="form-block" class="scratch-metal">
				<div id="form-viewport">
					<form method="post" action="/Account/Login/form-login" id="form-login" class="input-wrapper blue-gradient glossy" title="Đăng nhập">
						@Html.AntiForgeryToken()
						<ul class="inputs black-input large">
							<!-- The autocomplete="off" attributes is the only way to prevent webkit browsers from filling the inputs with yellow -->
							<li><span class="icon-user mid-margin-right"></span>@Html.TextBoxFor(m => m.UserName, new { @id = "login", @class = "input-unstyled", @placeholder = "Tên đăng nhập", @autocomplete = "off" })</li>
							<li><span class="icon-lock mid-margin-right"></span>@Html.PasswordFor(m => m.Password, new { @id = "pass", @class = "input-unstyled", @placeholder = "Mật khẩu", @autocomplete = "off" })</li>
						</ul>
						<p class="button-height">
							<button type="submit" class="button glossy float-right" id="login">Đăng nhập</button>
							@Html.CheckBoxFor(m => m.RememberMe, new { @class = "switch tiny mid-margin-right with-tooltip", @title = "Tự động đăng nhập" })
							<label for="remind">Ghi nhớ</label>
						</p>
					</form>
					<form method="post" action="" id="form-password" class="input-wrapper orange-gradient glossy" title="Quên mật khẩu?">

						<p class="message">
							Nếu bạn không thể nhớ được mật khẩu cũ, hãy điền địa chỉ Email của bạn bên dưới, và chúng tôi sẽ gửi cho bạn mật khẩu mới:
							<span class="block-arrow"><span></span></span>
						</p>

						<ul class="inputs black-input large">
							<li><span class="icon-mail mid-margin-right"></span>
								<input type="email" name="mail" id="mail" value="" class="input-unstyled" placeholder="Địa chỉ Email của bạn" autocomplete="off"></li>
						</ul>

						<button type="submit" class="button glossy full-width" id="send-password">Gửi yêu cầu</button>

					</form>
				</div>
			</div>
		</div>
	</div>
	<!-- JavaScript at the bottom for fast page loading -->

	<!-- Scripts -->
	@Scripts.Render("~/developr/loginscript")

	<script>

		/*
		 * How do I hook my login script to these?
		 * --------------------------------------
		 *
		 * These scripts are meant to be non-obtrusive: if the user has disabled javascript or if an error occurs, the forms
		 * works fine without ajax.
		 *
		 * The only part you need to edit are the scripts between the EDIT THIS SECTION tags, which do inputs validation and
		 * send data to server. For instance, you may keep the validation and add an AJAX call to the server with the user
		 * input, then redirect to the dashboard or display an error depending on server return.
		 *
		 * Or if you don't trust AJAX calls, just remove the event.preventDefault() part and let the form be submitted.
		 */

		$(document).ready(function () {
			/*
			 * JS login effect
			 * This script will enable effects for the login page
			 */
			// Elements
			var doc = $('html').addClass('js-login'),
				container = $('#container'),
				formWrapper = $('#form-wrapper'),
				formBlock = $('#form-block'),
				formViewport = $('#form-viewport'),
				forms = formViewport.children('form'),

				// Doors
				topDoor = $('<div id="top-door" class="form-door"><div></div></div>').appendTo(formViewport),
				botDoor = $('<div id="bot-door" class="form-door"><div></div></div>').appendTo(formViewport),
				doors = topDoor.add(botDoor),

				// Switch
				formSwitch = $('<div id="form-switch"><span class="button-group"></span></div>').appendTo(formBlock).children(),

				// Current form
				hash = (document.location.hash.length > 1) ? document.location.hash.substring(1) : false,

				// If layout is centered
				centered,

				// Store current form
				currentForm,

				// Animation interval
				animInt,

				// Work vars
				maxHeight = false,
				blocHeight;

			/******* EDIT THIS SECTION *******/

			/*
			 * Login
			 * These functions will handle the login process through AJAX
			 */
			$('#form-login').submit(function (event) {
				// Values
				var login = $.trim($('#login').val()),
					pass = $.trim($('#pass').val());

				// Check inputs
				if (login.length === 0) {
					// Display message
					displayError('Bạn chưa nhập Tên đăng nhập');
					return false;
				}
				else if (pass.length === 0) {
					// Remove empty login message if displayed
					formWrapper.clearMessages('Bạn chưa nhập Tên đăng nhập');

					// Display message
					displayError('Bạn chưa nhập Mật khẩu');
					return false;
				}
				else {
					// Remove previous messages
					formWrapper.clearMessages();

					// Show progress
					displayLoading('Đang đăng nhập...');
				}
			});

			/******* END OF EDIT SECTION *******/

			/*
			 * Animated login
			 */

			// Prepare forms
			forms.each(function (i) {
				var form = $(this),
					height = form.outerHeight(),
					//active = (hash === false && i === 0) || (hash === this.id),
					active = (i===0),
					color = this.className.match(/[a-z]+-gradient/) ? ' ' + (/([a-z]+)-gradient/.exec(this.className)[1]) + '-active' : '';

				// Store size
				form.data('height', height);

				// Min-height for mobile layout
				if (maxHeight === false || height > maxHeight) {
					maxHeight = height;
				}

				// Button in the switch
				form.data('button', $('<a href="#' + this.id + '" class="button anthracite-gradient' + color + (active ? ' active' : '') + '">' + this.title + '</a>')
									.appendTo(formSwitch)
									.data('form', form));

				// Remove title to prevent tooltip from showing - thanks efreed :)
				this.title = '';
				// If active
				if (active) {
					// Store
					currentForm = form;

					// Height of viewport
					formViewport.height(height);
				}
				else {
					// Hide for now
					form.hide();
				}
			});

			// Main bloc height (without form height)

			blocHeight = formBlock.height() - currentForm.data('height');

			// Handle resizing (mostly for debugging)
			function handleLoginResize() {
				// Detect mode
				centered = (container.css('position') === 'absolute');

				// Set min-height for mobile layout
				if (!centered) {
					formWrapper.css('min-height', (blocHeight + maxHeight + 20) + 'px');
					container.css('margin-top', '');
				}
				else {
					formWrapper.css('min-height', '');
					if (parseInt(container.css('margin-top'), 10) === 0) {
						centerForm(currentForm, false);
					}
				}
			};

			// Register and first call
			$(window).bind('normalized-resize', handleLoginResize);
			handleLoginResize();

			// Switch behavior
			formSwitch.on('click', 'a', function (event) {
				var link = $(this),
					form = link.data('form'),
					previousForm = currentForm;

				event.preventDefault();
				if (link.hasClass('active')) {
					return;
				}

				// Refresh forms sizes
				forms.each(function (i) {
					var form = $(this),
						hidden = form.is(':hidden'),
						height = form.show().outerHeight();

					// Store size
					form.data('height', height);

					// If not active
					if (hidden) {
						// Hide for now
						form.hide();
					}
				});

				// Clear messages
				formWrapper.clearMessages();

				// If an animation is already running
				if (animInt) {
					clearTimeout(animInt);
				}
				formViewport.stop(true);

				// Update active button
				currentForm.data('button').removeClass('active');
				link.addClass('active');

				// Set as current
				currentForm = form;

				// if CSS transitions are available
				if (doc.hasClass('csstransitions')) {
					// Close doors - step 1
					doors.removeClass('door-closed').addClass('door-down');
					animInt = setTimeout(function () {
						// Close doors, step 2
						doors.addClass('door-closed');
						animInt = setTimeout(function () {
							// Hide previous form
							previousForm.hide();

							// Show target form
							form.show();

							// Center layout
							centerForm(form, true);

							// Height of viewport
							formViewport.animate({
								height: form.data('height') + 'px'
							}, function () {
								// Open doors, step 1
								doors.removeClass('door-closed');
								animInt = setTimeout(function () {
									// Open doors - step 2
									doors.removeClass('door-down');
								}, 300);
							});
						}, 300);
					}, 300);
				}
				else {
					// Close doors
					topDoor.animate({ top: '0%' }, 300);
					botDoor.animate({ top: '50%' }, 300, function () {
						// Hide previous form
						previousForm.hide();

						// Show target form
						form.show();

						// Center layout
						centerForm(form, true);

						// Height of viewport
						formViewport.animate({
							height: form.data('height') + 'px'
						}, {

							/* IE7 is a bit buggy, we must force redraw */
							step: function (now, fx) {
								topDoor.hide().show();
								botDoor.hide().show();
								formSwitch.hide().show();
							},

							complete: function () {
								// Open doors
								topDoor.animate({ top: '-50%' }, 300);
								botDoor.animate({ top: '105%' }, 300);
								formSwitch.hide().show();
							}
						});
					});
				}
			});

			// Initial vertical adjust
			centerForm(currentForm, false);

			/*
			 * Center function
			 * param jQuery form the form element whose height will be used
			 * param boolean animate whether or not to animate the position change
			 * param string|element|array any jQuery selector, DOM element or set of DOM elements which should be ignored
			 * return void
			 */
			function centerForm(form, animate, ignore) {
				// If layout is centered
				if (centered) {
					var siblings = formWrapper.siblings().not('.closing'),
						finalSize = blocHeight + form.data('height');

					// Ignored elements
					if (ignore) {
						siblings = siblings.not(ignore);
					}

					// Get other elements height
					siblings.each(function (i) {
						finalSize += $(this).outerHeight(true);
					});

					// Setup
					container[animate ? 'animate' : 'css']({ marginTop: -Math.round(finalSize / 2) + 'px' });
				}
			};

			/**
			 * Function to display error messages
			 * param string message the error to display
			*/
			function displayError(message) {
				// Show message
				var message = formBlock.message(message, {
					append: false,
					arrow: 'bottom',
					classes: ['red-gradient'],
					animate: false					// We'll do animation later, we need to know the message height first
				});

				// Vertical centering (where we need the message height)
				centerForm(currentForm, true, 'fast');

				// Watch for closing and show with effect
				message.bind('endfade', function (event) {
					// This will be called once the message has faded away and is removed
					centerForm(currentForm, true, message.get(0));

				}).hide().slideDown('fast');
			};

			/**
			 * Function to display loading messages
			 * param string message the message to display
			*/
			function displayLoading(message) {
				// Show message
				var message = formBlock.message('<strong>' + message + '</strong>', {
					append: false,
					arrow: 'bottom',
					classes: ['blue-gradient', 'align-center'],
					stripes: true,
					darkStripes: false,
					closable: false,
					animate: false					// We'll do animation later, we need to know the message height first
				});

				// Vertical centering (where we need the message height)
				centerForm(currentForm, true, 'fast');

				// Watch for closing and show with effect
				message.bind('endfade', function (event) {
					// This will be called once the message has faded away and is removed
					centerForm(currentForm, true, message.get(0));

				}).hide().slideDown('fast');
			};
		});

	</script>
</body>
</html>
