@(Html.Kendo().Grid<PharmacyStore.Models.LS_DOCTOR>()
    .Name("Grid")
    .Columns(col =>
    {
        col.Bound(p => p.Fullname);
        col.Bound(p => p.Address);
        col.Bound(p => p.Mobile);
        col.Bound(p => p.Hospital);
        col.Bound(p => p.Actflg)
            .HeaderHtmlAttributes(new { @style = "text-align:center;" })
            .HtmlAttributes(new { @style = "text-align:center;" })
            .Width(100);
    })
    .Pageable(p => p
        .PageSizes(true)
        .Refresh(true)
        .Messages(m => m
            .Empty("Không có dữ liệu.")
            .First("Trang đầu")
            .ItemsPerPage("Bản ghi")
            .Last("Trang cuối")
            .Next("Trang tiếp")
            .Previous("Trang trước")
            .Of("Trong tổng {0}")
            .Page("Trang")
            .Display("Tổng số bản ghi: {2}")))
    .Sortable()
    .Scrollable()
    .Filterable(p => p
        .Extra(false)
        .Messages(msg => msg
            .Filter("Lọc")
            .Clear("Tất cả")
            .And("Và")
            .Or("Hoặc")
            .Info("Lọc dữ liệu"))
        .Operators(o => o
            .ForString(str => str
                .Clear()
                .Contains("Chứa")
                .DoesNotContain("Không chứa"))
            .ForDate(d => d
                .Clear()
                .IsEqualTo("=")
                .IsGreaterThan(">")
                .IsGreaterThanOrEqualTo(">=")
                .IsLessThan("<")
                .IsLessThanOrEqualTo("<=")
                .IsNotEqualTo("<>"))
            .ForNumber(n => n
                .Clear()
                .IsEqualTo("=")
                .IsGreaterThan(">")
                .IsGreaterThanOrEqualTo(">=")
                .IsLessThan("<")
                .IsLessThanOrEqualTo("<=")
                .IsNotEqualTo("<>"))))
    .Resizable(p => p.Columns(true))
    .Reorderable(p => p.Columns(true))
    .Selectable(p => p.Mode(GridSelectionMode.Single))
    .Events(e => e.DataBound("onDataBound").Change("onSelectedChange"))
    .DataSource(datasource => datasource
        .Ajax()
        .PageSize(10)
        .Model(model => model.Id(p => p.Id))
        .Read(read => read.Action("GetList", "Doctor"))
    )
)

<script>
    // Khai báo MVVM để field dữ liệu từ Grid khi select row
    var vm = kendo.observable({
        Id: null,
        Fullname: null,
        Address: null,
        Mobile: null,
        Hospital: null
    });

    kendo.bind($('#FormEdit'), vm);

    function onDataBound(arg) {
        // Sự kiện DataBound, kiểm tra xem số lượng Item. Nếu không có dữ liệu nào trong danh sách thì Disable các ToolbarItem khác ngoài Create
        var itemCount = this.dataSource.total();

        // Nếu không có row nào được select thì Disable các ToolbarItem trừ Create
        if (this.select().length == 0) {
            DisableAllToolbarItemExpectCreate(true);
        } else {
            DisableAllToolbarItemExpectCreate(itemCount == 0);
        }

        // Select lại item vừa chọn lấy từ Hidden field Id
        var grid = this;
        var id = $("#Id").val();
        if (id != null && id != '') {
            var dataItem = grid.dataSource.get(id);
            if (dataItem != null) {
                var row = grid.tbody.find("tr[data-uid='" + dataItem.uid + "']");
                grid.select(row);
            } else {
                // Nếu không tìm thấy Row với id thì chọn Row đầu tiên
                var row = grid.tbody.find("tr:first");
                grid.select(row);
            }
        } else {
            // Nếu Id rỗng (thao tác xóa, hoặc lần đầu tiên load View) thì chọn lại Row đầu tiên
            var row = grid.tbody.find("tr:first");
            grid.select(row);
        }
    }
    function onSelectedChange(arg) {
        var grid = $("#Grid").data("kendoGrid");
        // Lấy row được select và set cho MVVM
        var selectedItem = grid.dataItem(grid.select());
        vm.set("Id", selectedItem.Id);
        vm.set("Fullname", selectedItem.Fullname);
        vm.set("Address", selectedItem.Address);
        vm.set("Mobile", selectedItem.Mobile);
        vm.set("Hospital", selectedItem.Hospital);

        // Format các Mask Input
        FormatMaskedInput();

        // Enable toàn  bộ ToolbarItem
        DisableAllToolbarItemExpectCreate(false);
    }

</script>
